{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Apps.js","index.js"],"names":["Boolean","window","location","hostname","match","ServiceWorker","Card","props","className","alt","src","id","name","email","CardList","Robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Apps","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4MAYoBA,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA0HWC,kB,4BC/HJC,EAZJ,SAACC,GACV,OACE,yBAAKC,UAAU,mDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,iBACrB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCcPC,EAnBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACbC,EAAcD,EAAOE,KAAI,SAACC,EAAKC,GACrC,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EACnBR,GAAII,EAAOI,GAAGR,GACbC,KAAMG,EAAOI,GAAGP,KACfC,MAAOE,EAAOI,GAAGN,WAIf,OACE,6BACKG,ICAIK,EAZC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,yBAAKd,UAAU,OACf,2BACAA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MC0CHI,G,wDA3CX,aAAc,IAAD,8BACT,gBAYJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAZ1C,EAAKC,MAAM,CACPlB,OAAS,GACTe,YAAc,IAJT,E,gEAOO,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC3EF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACd,OAASuB,S,+BASlC,IAAD,OACEC,EAAeC,KAAKP,MAAMlB,OAAO0B,QAAO,SAAA1B,GAC1C,OAAOA,EAAOH,KAAK8B,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAIrE,OAA8B,IAA3BF,KAAKP,MAAMlB,OAAO6B,OACV,uCAMP,yBAAKpC,UAAU,MACX,wBAAIA,UAAU,SAAd,eACA,kBAAC,EAAD,CAAWc,aAAckB,KAAKb,iBAC9B,kBAAC,EAAD,CAAUZ,OAAQwB,S,GAnCfM,cCGnBC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SL0HxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a4990062.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  } export default ServiceWorker;","import React from 'react';\r\nconst Card=(props) =>\r\n{ return (\r\n    <div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-7'>\r\n        <img alt='robots' src={`https://robohash.org/${props.id}?100Ã—100`}/>\r\n        <div>\r\n            <h2>{props.name}</h2>\r\n            <p>{props.email}</p>\r\n        </div>\r\n        </div>\r\n    \r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({Robots}) =>{\r\nconst cardComponent=Robots.map((user,i)=>{\r\nreturn (<Card key={i} \r\nid={Robots[i].id}\r\n name={Robots[i].name}\r\n  email={Robots[i].email}\r\n  />);\r\n}\r\n)\r\n    return(\r\n      <div>\r\n          {cardComponent}\r\n      </div>\r\n    );\r\n\r\n\r\n\r\n    \r\n}\r\nexport default CardList;","import React from 'react';\r\nconst SearchBox=({searchChange})=>{\r\n    return(\r\n        <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}/>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport  './App.css';\r\n\r\n\r\nclass Apps extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            Robots : [],\r\n            searchfield : ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\r\n        .then(users => this.setState({Robots : users}));\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield : event.target.value})\r\n        \r\n    \r\n    }\r\n    render(){\r\n        const filterRobots = this.state.Robots.filter(Robots => {\r\n            return Robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        }\r\n        )\r\n\r\n        if(this.state.Robots.length===0){\r\n            return <h1>Loading</h1>\r\n\r\n        }\r\n        else{\r\n         \r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='tc f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <CardList Robots={filterRobots}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n}\r\n    \r\n\r\n    \r\nexport default Apps;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport 'tachyons';\nimport *as serviceWorker from './serviceWorker';\nimport Apps from './Apps';\n\n\nReactDOM.render(<Apps/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}